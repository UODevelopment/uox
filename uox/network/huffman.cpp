//Copyright Â© 2023 Charles Kerr. All rights reserved.

#include "huffman.hpp"
#include <array>
#include <vector>

using namespace std::string_literals ;

// Huffman Code Table - used with Huffman algorithm for compressing outgoing network packets

static constexpr std::array<std::array<std::uint32_t,2>,257> bitTable{{
    {0x02, 0x000},  {0x05, 0x01F},  {0x06, 0x022},  {0x07, 0x034},  {0x07, 0x075},  {0x06, 0x028},  {0x06, 0x03B},  {0x07, 0x032},
    {0x08, 0x0E0},  {0x08, 0x062},  {0x07, 0x056},  {0x08, 0x079},  {0x09, 0x19D},  {0x08, 0x097},  {0x06, 0x02A},  {0x07, 0x057},
    {0x08, 0x071},  {0x08, 0x05B},  {0x09, 0x1CC},  {0x08, 0x0A7},  {0x07, 0x025},  {0x07, 0x04F},  {0x08, 0x066},  {0x08, 0x07D},
    {0x09, 0x191},  {0x09, 0x1CE},  {0x07, 0x03F},  {0x09, 0x090},  {0x08, 0x059},  {0x08, 0x07B},  {0x08, 0x091},  {0x08, 0x0C6},
    {0x06, 0x02D},  {0x09, 0x186},  {0x08, 0x06F},  {0x09, 0x093},  {0x0A, 0x1CC},  {0x08, 0x05A},  {0x0A, 0x1AE},  {0x0A, 0x1C0},
    {0x09, 0x148},  {0x09, 0x14A},  {0x09, 0x082},  {0x0A, 0x19F},  {0x09, 0x171},  {0x09, 0x120},  {0x09, 0x0E7},  {0x0A, 0x1F3},
    {0x09, 0x14B},  {0x09, 0x100},  {0x09, 0x190},  {0x06, 0x013},  {0x09, 0x161},  {0x09, 0x125},  {0x09, 0x133},  {0x09, 0x195},
    {0x09, 0x173},  {0x09, 0x1CA},  {0x09, 0x086},  {0x09, 0x1E9},  {0x09, 0x0DB},  {0x09, 0x1EC},  {0x09, 0x08B},  {0x09, 0x085},
    {0x05, 0x00A},  {0x08, 0x096},  {0x08, 0x09C},  {0x09, 0x1C3},  {0x09, 0x19C},  {0x09, 0x08F},  {0x09, 0x18F},  {0x09, 0x091},
    {0x09, 0x087},  {0x09, 0x0C6},  {0x09, 0x177},  {0x09, 0x089},  {0x09, 0x0D6},  {0x09, 0x08C},  {0x09, 0x1EE},  {0x09, 0x1EB},
    {0x09, 0x084},  {0x09, 0x164},  {0x09, 0x175},  {0x09, 0x1CD},  {0x08, 0x05E},  {0x09, 0x088},  {0x09, 0x12B},  {0x09, 0x172},
    {0x09, 0x10A},  {0x09, 0x08D},  {0x09, 0x13A},  {0x09, 0x11C},  {0x0A, 0x1E1},  {0x0A, 0x1E0},  {0x09, 0x187},  {0x0A, 0x1DC},
    {0x0A, 0x1DF},  {0x07, 0x074},  {0x09, 0x19F},  {0x08, 0x08D},  {0x08, 0x0E4},  {0x07, 0x079},  {0x09, 0x0EA},  {0x09, 0x0E1},
    {0x08, 0x040},  {0x07, 0x041},  {0x09, 0x10B},  {0x09, 0x0B0},  {0x08, 0x06A},  {0x08, 0x0C1},  {0x07, 0x071},  {0x07, 0x078},
    {0x08, 0x0B1},  {0x09, 0x14C},  {0x07, 0x043},  {0x08, 0x076},  {0x07, 0x066},  {0x07, 0x04D},  {0x09, 0x08A},  {0x06, 0x02F},
    {0x08, 0x0C9},  {0x09, 0x0CE},  {0x09, 0x149},  {0x09, 0x160},  {0x0A, 0x1BA},  {0x0A, 0x19E},  {0x0A, 0x39F},  {0x09, 0x0E5},
    {0x09, 0x194},  {0x09, 0x184},  {0x09, 0x126},  {0x07, 0x030},  {0x08, 0x06C},  {0x09, 0x121},  {0x09, 0x1E8},  {0x0A, 0x1C1},
    {0x0A, 0x11D},  {0x0A, 0x163},  {0x0A, 0x385},  {0x0A, 0x3DB},  {0x0A, 0x17D},  {0x0A, 0x106},  {0x0A, 0x397},  {0x0A, 0x24E},
    {0x07, 0x02E},  {0x08, 0x098},  {0x0A, 0x33C},  {0x0A, 0x32E},  {0x0A, 0x1E9},  {0x09, 0x0BF},  {0x0A, 0x3DF},  {0x0A, 0x1DD},
    {0x0A, 0x32D},  {0x0A, 0x2ED},  {0x0A, 0x30B},  {0x0A, 0x107},  {0x0A, 0x2E8},  {0x0A, 0x3DE},  {0x0A, 0x125},  {0x0A, 0x1E8},
    {0x09, 0x0E9},  {0x0A, 0x1CD},  {0x0A, 0x1B5},  {0x09, 0x165},  {0x0A, 0x232},  {0x0A, 0x2E1},  {0x0B, 0x3AE},  {0x0B, 0x3C6},
    {0x0B, 0x3E2},  {0x0A, 0x205},  {0x0A, 0x29A},  {0x0A, 0x248},  {0x0A, 0x2CD},  {0x0A, 0x23B},  {0x0B, 0x3C5},  {0x0A, 0x251},
    {0x0A, 0x2E9},  {0x0A, 0x252},  {0x09, 0x1EA},  {0x0B, 0x3A0},  {0x0B, 0x391},  {0x0A, 0x23C},  {0x0B, 0x392},  {0x0B, 0x3D5},
    {0x0A, 0x233},  {0x0A, 0x2CC},  {0x0B, 0x390},  {0x0A, 0x1BB},  {0x0B, 0x3A1},  {0x0B, 0x3C4},  {0x0A, 0x211},  {0x0A, 0x203},
    {0x09, 0x12A},  {0x0A, 0x231},  {0x0B, 0x3E0},  {0x0A, 0x29B},  {0x0B, 0x3D7},  {0x0A, 0x202},  {0x0B, 0x3AD},  {0x0A, 0x213},
    {0x0A, 0x253},  {0x0A, 0x32C},  {0x0A, 0x23D},  {0x0A, 0x23F},  {0x0A, 0x32F},  {0x0A, 0x11C},  {0x0A, 0x384},  {0x0A, 0x31C},
    {0x0A, 0x17C},  {0x0A, 0x30A},  {0x0A, 0x2E0},  {0x0A, 0x276},  {0x0A, 0x250},  {0x0B, 0x3E3},  {0x0A, 0x396},  {0x0A, 0x18F},
    {0x0A, 0x204},  {0x0A, 0x206},  {0x0A, 0x230},  {0x0A, 0x265},  {0x0A, 0x212},  {0x0A, 0x23E},  {0x0B, 0x3AC},  {0x0B, 0x393},
    {0x0B, 0x3E1},  {0x0A, 0x1DE},  {0x0B, 0x3D6},  {0x0A, 0x31D},  {0x0B, 0x3E5},  {0x0B, 0x3E4},  {0x0A, 0x207},  {0x0B, 0x3C7},
    {0x0A, 0x277},  {0x0B, 0x3D4},  {0x08, 0x0C0},  {0x0A, 0x162},  {0x0A, 0x3DA},  {0x0A, 0x124},  {0x0A, 0x1B4},  {0x0A, 0x264},
    {0x0A, 0x33D},  {0x0A, 0x1D1},  {0x0A, 0x1AF},  {0x0A, 0x39E},  {0x0A, 0x24F},  {0x0B, 0x373},  {0x0A, 0x249},  {0x0B, 0x372},
    {0x09, 0x167},  {0x0A, 0x210},  {0x0A, 0x23A},  {0x0A, 0x1B8},  {0x0B, 0x3AF},  {0x0A, 0x18E},  {0x0A, 0x2EC},  {0x07, 0x062},
    {0x04, 0x00D}
}};

auto packHuffman(const std::vector<std::uint8_t> &input) -> std::vector<std::uint8_t> {
    auto packedBuffer = std::vector<std::uint8_t>(input.size()*2,0) ;
    
    auto len = static_cast<int>(input.size());
    auto pIn = input.data() ;
    auto pOut = packedBuffer.data() ;

    unsigned int packedLength = 0 ;
    int bitByte = 0 ;
    int nrBits = 0 ;
    unsigned int value = 0 ;

    while( len--) {
        nrBits = bitTable[*pIn][0] ;
        value = bitTable[*pIn++][1] ;
        while(nrBits--){
            pOut[packedLength] = static_cast<std::uint8_t>( (pOut[packedLength]<<1) | static_cast<std::uint8_t>((value>>nrBits)&0x1 ));
            bitByte = (bitByte + 1) & 0x07 ;
            if (!bitByte){
                ++packedLength ;
            }
        }
    }
    nrBits = bitTable[256][0] ;
    value = bitTable[256][1] ;
    while (nrBits--) {
        pOut[packedLength] = static_cast<std::uint8_t>((pOut[packedLength]<<1) | static_cast<std::uint8_t>((value>>nrBits) & 0x1));
        bitByte = (bitByte+1) & 0x07 ;
        if (!bitByte){
            ++packedLength ;
        }
    }
    if (bitByte){
        while(bitByte < 8){
            pOut[packedLength] <<=1 ;
            ++bitByte ;
        }
        ++packedLength ;
    }
    packedBuffer.resize(packedLength);
    return packedBuffer ;
}
